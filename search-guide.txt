Guide to Using search_files.py by mgxy0 / mark1n0

Basic Usage

```
usage: search_files.py [-h] [-t FILE_TYPE] [-e EXTENSION] [-n NAME] [-r] [-f DATE_FILTER] [-s SIZE_FILTER]
                       [-p PERM_FILTER] [-x EXCLUDE_DIRS [EXCLUDE_DIRS ...]]
                       path
```

Positional Arguments

- path: The starting directory for the search.

Options

- -h, --help: Show the help message and exit.
- -t FILE_TYPE, --file-type FILE_TYPE: Filter by file type (e.g., image, video, document, audio, archive, server).
- -e EXTENSION, --extension EXTENSION: Filter files by extension.
- -n NAME, --name NAME: Filter files by name.
- -r, --no-recursive: Search directories non-recursively.
- -f DATE_FILTER, --date-filter DATE_FILTER: Filter files by modification date (24h, month, year).
- -s SIZE_FILTER, --size-filter SIZE_FILTER: Filter files by size (e.g., 10k, 20m, 1g).
- -p PERM_FILTER, --perm-filter PERM_FILTER: Filter files by permissions (e.g., 755, 644).
- -x EXCLUDE_DIRS [EXCLUDE_DIRS ...], --exclude-dirs EXCLUDE_DIRS [EXCLUDE_DIRS ...]: Exclude specific directories from the search.

Usage Examples

1. Basic Search in a Directory

```sh
python search_files.py /path/to/directory
```

2. Filter by File Type

```sh
python search_files.py /path/to/directory -t image
```
Available file types: image, video, document, audio, archive, server.

3. Filter by Extension

```sh
python search_files.py /path/to/directory -e .txt
```

4. Filter by Name

```sh
python search_files.py /path/to/directory -n example
```

5. Non-Recursive Search

```sh
python search_files.py /path/to/directory -r
```

6. Filter by Date

```sh
python search_files.py /path/to/directory -f 24h
```
Other date filter options: month, year.

7. Filter by Size

```sh
python search_files.py /path/to/directory -s 10m
```
Size can be specified in k (kilobytes), m (megabytes), or g (gigabytes).

8. Filter by Permissions

```sh
python search_files.py /path/to/directory -p 755
```

9. Exclude Specific Directories

```sh
python search_files.py /path/to/directory -x dir1 dir2
```

10. Combining Multiple Filters

```sh
python search_files.py /path/to/directory -t document -e .pdf -n report -f month -s 1m -p 644 -x temp backup
```

Conclusion

This guide provides a comprehensive overview of how to use search_files.py to find and copy specific files based on various criteria. Experiment with different options to optimize your search according to your specific needs.
